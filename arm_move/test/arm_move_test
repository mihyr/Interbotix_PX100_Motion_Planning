#!/usr/bin/env python

from rosparam import dump_params
import rospy
import sys
import copy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from geometry_msgs.msg import Quaternion, Vector3
from moveit_msgs.msg import MoveItErrorCodes
from math import pi, dist, fabs, cos
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
from std_srvs.srv import Empty, EmptyResponse
from arm_move.srv import reset, step, follow, stepRequest, stepResponse
import unittest

class arm_test_class(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(arm_test_class, self).__init__(*args, **kwargs)
        rospy.init_node('arm_test')
    
    def test_unvalid_path(self):
        rospy.wait_for_service('step')
        step_service = rospy.ServiceProxy('step', step)
        Step_input = stepRequest()
        Step_input.goal_position = Vector3(0.1,0,-0.2)
        Step_input.Gripper_state = "Closed"
        Step_input.goal_orientation = Quaternion(0,0,0,1)
        Step_input.record = False
        rospy.loginfo(Step_input)
        error = step_service(Step_input)

        rospy.loginfo(f"error: {error}")
        self.assertEqual(error.code.val, -1)

if __name__ == "__main__":
    # unittest.main() doesn't start roscore
    import rostest
    rostest.rosrun('arm_move', 'arm_test', arm_test_class)